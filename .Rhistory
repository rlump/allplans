source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
h
help
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
debug
bestCarrierTargets(mmm)
debug
debug(bestCarrierTargets(mmm))
bestCarrierTargets(mmm)
uc
df
i
1:4
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
a
q
bestCarrierTargets(mmm)
help
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
i
i
j
df
df[j,"compCarrier1"]
uc
dfreturn
df
debugSource('~/RailApps/allplans/processCountyPlans.R')
a
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
matrix()
matrix(c("dog,"cat"))
matrix(c("dog,"cat"))
matrix(c("dog","cat"))
matrix(c("dog","cat"),nrow=1)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
n
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
matrix(c("dog","cat"),nrow=1)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
matrix(c("dog","cat"),nrow=1)
bestCarrierTargets(mmm)
matrix(c("dog","cat"),nrow=1)
View(lll)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
with(lll[lll$state=="OH",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm) -> bests
bests[order(-bests$max),]
sum(bests[,bests$max])
sum(bests[,"max"])
with(lll[lll$state=="OH",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="OH",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="NC",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="IL",],plot(countyPop,medianctysilverprc))
abline(model,lwd = 2)
with(lll[lll$state=="IL",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
bests[order(-bests$max),]
sum(bests[,"max"])
sum(bests[,"max"]) -> bests
write.csv
write.csv(bests,"bests.csv")
write.table(bests,"bests.csv")
bests
bests[order(-bests$max),]
bestCarrierTargets(mmm) -> bests
bests[order(-bests$max),]
bests[order(-bests$max),] -> bests
write.csv(bests,"bests.csv")
bests[order(-bests$max),] -> bests
bests
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))]\
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))]
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="OH",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="MO",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="MI",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="GA",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="UT",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="FL",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="AZ",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="AZ",],plot(medianctysilverprc,countyPop))
plans[1,]
plans[plans$State == "AZ",]
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> lll
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> lll
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> lll
lll
lll[!is.na(lll$compCarrier3),]
View(lll)
with(lll[lll$state=="AZ",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="FL",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="GA",],plot(medianctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="OH",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
with(lll[lll$state=="MO",],plot(meanctysilverprc,countyPop))
abline(model,lwd = 2)
getwd()
read.csv("./brokercomp.csv")
read.csv("./brokercomp.csv")
read.csv("./brokercomp.csv")
read.csv("./brokercomp.csv")
read.csv("./brokercomp.csv") -> brokerComps
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> lll
View(lll)
marketSummaryStatePlans() -> mmm
source('~/RailApps/allplans/processCountyPlans.R')
marketSummaryStatePlans() -> mmm
View(mmm)
bestCarrierTargets(mmm) -> bests
sum(bests[,bests$max])
View(bests)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm) -> bests
marketSummaryStatePlans() -> mmm
View(mmm)
bestCarrierTargets(mmm) -> bests
View(bests)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm) -> bests
View(bests)
bests[order(-bests$max),]
sum(bests[,"max"])
View(mmm)
sum(bests[,"max"])
bests[order(-bests$max),] -> bests
View(bests)
bests
round(bests[,"numPlans"])
round(bests[,"numPlans"]) -> bests[,"numPlans"]
round(bests[,"max"]) -> bests[,"max"]
bests
names(best)
names(bests)
names(bests)[4]
names(bests)[4] <- "marketValue"
bests
write.csv(bests,"bests.csv")
ls()
View(brokerComps)
cbind(brokerComps,state.abb)
read.csv("./brokercomp.csv") -> brokerComps
cbind(brokerComps,state.abb)
cbind(brokerComps,state.abb) -> brokerComps
View(brokerComps)
brokerComps[]
subset(brokerComps,select = ind:state.abb)
subset(brokerComps,select = c(ind,state.abb))
subset(brokerComps,select = c(ind,state.abb)) -> brokerComps
install.packages("ppls")
library(ppls)
v<-1:5
v
v<-1:5
normalize.vector(v)
normalize.vector(brokerComps[,1])
brokerComps
brokerComps[,1]*.01
brokerComps[,1]*.01 -> brokerComps
brokerComps
read.csv("./brokercomp.csv") -> brokerComps
subset(brokerComps,select = c(ind,state.abb)) -> brokerComps
cbind(brokerComps,state.abb) -> brokerComps
subset(brokerComps,select = c(ind,state.abb)) -> brokerComps
brokerComps
brokerComps[,1]*.01 -> brokerComps[,1]
brokerComps
bests
names(brokerComps)
names(brokerComps)[2]
names(brokerComps)[2] <- "state"
brokerComps
merge(bests,brokerComps)
bests
merge(bests,brokerComps) ->bestsCommissions
View(bestsCommissions)
read.csv("./brokercomp.csv") -> brokerComps
brokerComps
subset(brokerComps,select = c(indper,state.abb)) -> brokerComps
bests
bestsCommissions
bestsCommissions[,"ind"]
bestsCommissions[,"ind"]*bestsCommissions[,"marketValue"]
bestsCommissions[,"ind"]*bestsCommissions[,"marketValue"] -> bestsCommissions$relativeMarketVal
bestsCommissions
bestsCommissions[,6]
bestsCommissions[,7]
round(bestsCommissions[,7])
round(bestsCommissions[,7]) -> bestsCommissions[,7]
bestsCommissions
bestsCommissions[order(bestsCommissions$relativeMarketVal)]
bestsCommissions[order("relativeMarketVal")]
bestsCommissions[order(bestsCommissions$relativeMarketVal)]
bestsCommissions[order(bestsCommissions$relativeMarketVal,)]
order(bestsCommissions$relativeMarketVal
)
bestsCommissions[order(bestsCommissions$relativeMarketVal,)]
bestsCommissions[order(bestsCommissions$relativeMarketVal)]
bestsCommissions[order(bestsCommissions$relativeMarketVal),]
bestsCommissions[-order(bestsCommissions$relativeMarketVal),]
bestsCommissions[order(-bestsCommissions$relativeMarketVal),]
bestsCommissions[,"ind"]/bestsCommissions[1,"ind"]*bestsCommissions[,"marketValue"] -> bestsCommissions$relativeMarketVal
bestsCommissions[order(-bestsCommissions$relativeMarketVal),]
names(bestsCommissions)
names(bestsCommissions)[6]
names(bestsCommissions)[7]
names(bestsCommissions)[7] <- relMktVal.TX=1
names(bestsCommissions)[7] <- "relMktVal.TX=1"
bestsCommissions[order(-bestsCommissions$relativeMarketVal),]
bestsCommissions[order(-bestsCommissions$relativeMarketVal),]
bestsCommissions
bestsCommissions[order(-bestsCommissions$relMktVal.TX=1),]
names(bestsCommissions)[7] <- "relMktVal.TXeq1"
bestsCommissions[order(-bestsCommissions$relMktVal.TXeq1),]
bestsCommissions[,"ind"]/bestsCommissions[1,"ind"]*bestsCommissions[,"marketValue"] -> bestsCommissions$relativeMarketVal
bestsCommissions
bestsCommissions
bestsCommissions[,"ind"]/bestsCommissions[bests$state=="TX","ind"]*bestsCommissions[,"marketValue"] -> bestsCommissions$relativeMarketVal
bestsCommissions
bestCarrierTargets(mmm) -> bests
brokerComps
subset(brokerComps,select = c(ind,state.abb)) -> brokerComps
bestCarrierTargets(mmm) -> bests
read.csv("./brokercomp.csv") -> brokerComps
brokerComps
source('~/RailApps/allplans/processCountyPlans.R')
read.csv("./brokercomp.csv") -> brokerComps
read.csv("./brokercomp.csv") -> brokerComps
cbind(brokerComps,state.abb)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm) -> bests
bests
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
names(brokerComps)[2] <- "state"
brokerComps
read.csv("./brokercomp.csv") -> brokerComps
cbind(brokerComps,state.abb) -> brokerComps
brokerComps
names(brokerComps)
names(brokerComps)[6]
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
names(brokerComps)[2] <- "state"
names(brokerComps)[2] <- "state"
names(brokerComps)[2] <- "state"
names(brokerComps)[6]
source('~/RailApps/allplans/processCountyPlans.R')
names(brokerComps)[6]
names(brokerComps)[6] <- "state"
names(brokerComps)[6]
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm)
source('~/RailApps/allplans/processCountyPlans.R')
bestCarrierTargets(mmm) -> bests
write.csv(bests,"bests.csv")
source('~/RailApps/allplans/processCounties.R')
processCounties(counties) -> allCounties
allCounties
marketSummaryStatePlans() -> mmm
bestCarrierTargets(mmm) -> bests
bests
bests
write.csv(bests,"bests.csv")
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
marketSummaryStatePlans() -> mmm
bestCarrierTargets(mmm) -> bests
View(bests)
View(bests)
View(mmm)
source('~/RailApps/allplans/processCounties.R')
processCounties(counties) -> allCounties
allCounties
bestCarrierTargets(mmm) -> bests
marketSummaryStatePlans() -> mmm
bestCarrierTargets(mmm) -> bests
View(bests)
source('~/RailApps/allplans/processCountyPlans.R')
processAllStatePlans() -> allplans
summaryStatePlans() -> allplans
View(allplans)
View(allplans)
summaryStatePlans() -> allplans
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> allplans
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> allplans
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> allplans
View(allplans)
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
summaryStatePlans() -> allplans
View(allplans)
sum(allplans[,"marketSize"])
sum(allplans[,"numPlans"])
summaryStatePlans() -> allplans
write.csv(allplans,"allplans_NotCATPLAT.csv")
allCounties
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
source('~/RailApps/allplans/processCountyPlans.R')
allStatePlansByCounty
source('~/RailApps/allplans/processCountyPlans.R')
allStatePlansByCounty() -> lll
source('~/RailApps/allplans/processCountyPlans.R')
allStatePlansByCounty() -> lll
View(lll)
with(lll[lll$state=="AK",],plot(meanctysilverprc,countyPop))
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
lll[lll$state=="WI"
]
lll[lll$state=="WI",]
dev.off()
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
with(lll[lll$state=="WI",],plot(meanctysilverprc,countyPop))
